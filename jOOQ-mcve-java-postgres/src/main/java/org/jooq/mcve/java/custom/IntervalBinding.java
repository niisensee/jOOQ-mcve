package org.jooq.mcve.java.custom;

import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.Types;
import java.util.Objects;
import org.jooq.Binding;
import org.jooq.BindingGetResultSetContext;
import org.jooq.BindingGetSQLInputContext;
import org.jooq.BindingGetStatementContext;
import org.jooq.BindingRegisterContext;
import org.jooq.BindingSQLContext;
import org.jooq.BindingSetSQLOutputContext;
import org.jooq.BindingSetStatementContext;
import org.jooq.Converter;
import org.jooq.impl.DSL;
import org.jooq.types.Interval;
import org.jooq.types.YearToSecond;

public class IntervalBinding implements Binding<YearToSecond, Interval> {

  private final Converter<String, Interval> converter = new IntervalConverter();

  @Override
  public Converter<YearToSecond, Interval> converter() {
    return new Converter<>() {
      @Override
      public Interval from(final YearToSecond databaseObject) {
        return databaseObject;
      }

      @Override
      public YearToSecond to(final Interval userObject) {
        return userObject != null ? YearToSecond.valueOf(userObject.toDuration()) : null;
      }

      @Override
      public Class<YearToSecond> fromType() {
        return YearToSecond.class;
      }

      @Override
      public Class<Interval> toType() {
        return Interval.class;
      }
    };
  }

  @Override
  public void sql(BindingSQLContext<Interval> ctx) {
//    if (ctx.render().paramType() == ParamType.INLINED) {
//      ctx.render().visit(DSL.inline(ctx.convert(converter()).value())).sql("interval ");
//    }
    ctx.render().sql("interval ").visit(DSL.val(ctx.convert(converter).value()));
  }

  // Registering VARCHAR types for JDBC CallableStatement OUT parameters
  @Override
  public void register(BindingRegisterContext<Interval> ctx) throws SQLException {
    ctx.statement().registerOutParameter(ctx.index(), Types.VARCHAR);
  }

  // Converting the NullableBoundInterval to a String value and setting that on a JDBC PreparedStatement
  @Override
  public void set(BindingSetStatementContext<Interval> ctx) throws SQLException {
    ctx.statement().setString(ctx.index(), Objects.toString(ctx.convert(converter).value(), null));
  }

  // Getting a String value from a JDBC ResultSet and converting that to a NullableBoundInterval
  @Override
  public void get(BindingGetResultSetContext<Interval> ctx) throws SQLException {
    ctx.convert(converter).value(ctx.resultSet().getString(ctx.index()));
  }

  // Getting a String value from a JDBC CallableStatement and converting that to a NullableBoundInterval
  @Override
  public void get(BindingGetStatementContext<Interval> ctx) throws SQLException {
    ctx.convert(converter).value(ctx.statement().getString(ctx.index()));
  }

  // Setting a value on a JDBC SQLOutput
  @Override
  public void set(BindingSetSQLOutputContext<Interval> ctx) throws SQLException {
    throw new SQLFeatureNotSupportedException();
  }

  // Getting a value from a JDBC SQLInput
  @Override
  public void get(BindingGetSQLInputContext<Interval> ctx) throws SQLException {
    throw new SQLFeatureNotSupportedException();
  }
}
